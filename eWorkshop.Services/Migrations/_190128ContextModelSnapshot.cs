// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eWorkshop.Services.Database;

#nullable disable

namespace eWorkshop.Services.Migrations
{
    [DbContext(typeof(_190128Context))]
    partial class _190128ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UlogeClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KorisniciClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("KorisniciUloge");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireResourceIndicator")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ApiResources_Name")
                        .IsUnique();

                    b.ToTable("ApiResources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 8, 18, 7, 18, 16, 411, DateTimeKind.Local).AddTicks(7969),
                            Description = "Api",
                            DisplayName = "api",
                            Enabled = true,
                            Name = "api",
                            NonEditable = false,
                            RequireResourceIndicator = false,
                            ShowInDiscoveryDocument = true
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId", "Type" }, "IX_ApiResourceClaims_ApiResourceId_Type")
                        .IsUnique();

                    b.ToTable("ApiResourceClaims");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId", "Key" }, "IX_ApiResourceProperties_ApiResourceId_Key")
                        .IsUnique();

                    b.ToTable("ApiResourceProperties");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId", "Scope" }, "IX_ApiResourceScopes_ApiResourceId_Scope")
                        .IsUnique();

                    b.ToTable("ApiResourceScopes");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApiResourceId" }, "IX_ApiResourceSecrets_ApiResourceId");

                    b.ToTable("ApiResourceSecrets");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ApiScopes_Name")
                        .IsUnique();

                    b.ToTable("ApiScopes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 8, 18, 7, 18, 16, 413, DateTimeKind.Local).AddTicks(411),
                            Description = "Pristup informacijama o korisniku",
                            DisplayName = "Pristup",
                            Emphasize = false,
                            Enabled = true,
                            Name = "profile",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = false
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 8, 18, 7, 18, 16, 413, DateTimeKind.Local).AddTicks(431),
                            Description = "Pristup e-mail adresama korisnika",
                            DisplayName = "Email",
                            Emphasize = false,
                            Enabled = true,
                            Name = "email",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = false
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 8, 18, 7, 18, 16, 413, DateTimeKind.Local).AddTicks(435),
                            Description = "Potreban je OpenID Connect, zahtijeva osnovne informacije o korisniku",
                            DisplayName = "OpenID",
                            Emphasize = false,
                            Enabled = true,
                            Name = "openid",
                            NonEditable = false,
                            Required = false,
                            ShowInDiscoveryDocument = false
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScopeId", "Type" }, "IX_ApiScopeClaims_ScopeId_Type")
                        .IsUnique();

                    b.ToTable("ApiScopeClaims");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiScopeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScopeId", "Key" }, "IX_ApiScopeProperties_ScopeId_Key")
                        .IsUnique();

                    b.ToTable("ApiScopeProperties");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("CibaLifetime")
                        .HasColumnType("int");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int");

                    b.Property<bool?>("CoordinateLifetimeWithUserSession")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PollingInterval")
                        .HasColumnType("int");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("bit");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_Clients_ClientId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsoluteRefreshTokenLifetime = 0,
                            AccessTokenLifetime = 0,
                            AccessTokenType = 0,
                            AllowAccessTokensViaBrowser = false,
                            AllowOfflineAccess = true,
                            AllowPlainTextPkce = false,
                            AllowRememberConsent = false,
                            AlwaysIncludeUserClaimsInIdToken = false,
                            AlwaysSendClientClaims = false,
                            AuthorizationCodeLifetime = 0,
                            BackChannelLogoutSessionRequired = false,
                            ClientId = "flutter",
                            ClientName = "Flutter",
                            ClientUri = "uri",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceCodeLifetime = 0,
                            EnableLocalLogin = false,
                            Enabled = true,
                            FrontChannelLogoutSessionRequired = false,
                            IdentityTokenLifetime = 0,
                            IncludeJwtId = false,
                            NonEditable = false,
                            ProtocolType = "x",
                            RefreshTokenExpiration = 0,
                            RefreshTokenUsage = 0,
                            RequireClientSecret = true,
                            RequireConsent = false,
                            RequirePkce = false,
                            RequireRequestObject = false,
                            SlidingRefreshTokenLifetime = 0,
                            UpdateAccessTokenClaimsOnRefresh = false
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "Type", "Value" }, "IX_ClientClaims_ClientId_Type_Value")
                        .IsUnique();

                    b.ToTable("ClientClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Type = "Email",
                            Value = "email"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            Type = "Name",
                            Value = "name"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 1,
                            Type = "Id",
                            Value = "id"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 1,
                            Type = "Username",
                            Value = "username"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "Origin" }, "IX_ClientCorsOrigins_ClientId_Origin")
                        .IsUnique();

                    b.ToTable("ClientCorsOrigins");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "GrantType" }, "IX_ClientGrantTypes_ClientId_GrantType")
                        .IsUnique();

                    b.ToTable("ClientGrantTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            GrantType = "client_credentials"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientIdPrestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "Provider" }, "IX_ClientIdPRestrictions_ClientId_Provider")
                        .IsUnique();

                    b.ToTable("ClientIdPRestrictions", (string)null);
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "PostLogoutRedirectUri" }, "IX_ClientPostLogoutRedirectUris_ClientId_PostLogoutRedirectUri")
                        .IsUnique();

                    b.ToTable("ClientPostLogoutRedirectUris");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "Key" }, "IX_ClientProperties_ClientId_Key")
                        .IsUnique();

                    b.ToTable("ClientProperties");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "RedirectUri" }, "IX_ClientRedirectUris_ClientId_RedirectUri")
                        .IsUnique();

                    b.ToTable("ClientRedirectUris");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId", "Scope" }, "IX_ClientScopes_ClientId_Scope")
                        .IsUnique();

                    b.ToTable("ClientScopes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Scope = "weatherapi.read"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            Scope = "weatherapi.write"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientSecrets_ClientId");

                    b.ToTable("ClientSecrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Created = new DateTime(2024, 8, 18, 7, 18, 16, 423, DateTimeKind.Local).AddTicks(7915),
                            Description = "Aplikacija",
                            Expiration = new DateTime(2025, 2, 4, 9, 39, 35, 109, DateTimeKind.Unspecified),
                            Type = "app",
                            Value = "flutter"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.DeviceCode", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DeviceCode");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex(new[] { "DeviceCode1" }, "IX_DeviceCodes_DeviceCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Expiration" }, "IX_DeviceCodes_Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Scheme" }, "IX_IdentityProviders_Scheme")
                        .IsUnique();

                    b.ToTable("IdentityProviders");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_IdentityResources_Name")
                        .IsUnique();

                    b.ToTable("IdentityResources");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentityResourceId", "Type" }, "IX_IdentityResourceClaims_IdentityResourceId_Type")
                        .IsUnique();

                    b.ToTable("IdentityResourceClaims");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentityResourceId", "Key" }, "IX_IdentityResourceProperties_IdentityResourceId_Key")
                        .IsUnique();

                    b.ToTable("IdentityResourceProperties");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IzvrseniServi", b =>
                {
                    b.Property<int>("IzvrseniServisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IzvrseniServisID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzvrseniServisId"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<int?>("KomponentaId")
                        .HasColumnType("int")
                        .HasColumnName("KomponentaID");

                    b.Property<string>("KomponentaNaziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KomponentaTip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KomponentaVrijednost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ServisId")
                        .HasColumnType("int")
                        .HasColumnName("ServisID");

                    b.HasKey("IzvrseniServisId");

                    b.HasIndex("KomponentaId");

                    b.HasIndex("ServisId");

                    b.ToTable("IzvrseniServis");

                    b.HasData(
                        new
                        {
                            IzvrseniServisId = 1,
                            Datum = new DateTime(2024, 8, 18, 5, 18, 16, 425, DateTimeKind.Utc).AddTicks(672),
                            KomponentaId = 1,
                            ServisId = 1
                        },
                        new
                        {
                            IzvrseniServisId = 2,
                            Datum = new DateTime(2024, 8, 18, 5, 18, 16, 425, DateTimeKind.Utc).AddTicks(677),
                            KomponentaId = 2,
                            ServisId = 1
                        },
                        new
                        {
                            IzvrseniServisId = 5,
                            Datum = new DateTime(2024, 8, 18, 5, 18, 16, 425, DateTimeKind.Utc).AddTicks(678),
                            KomponentaId = 3,
                            ServisId = 1
                        },
                        new
                        {
                            IzvrseniServisId = 3,
                            Datum = new DateTime(2024, 8, 18, 5, 18, 16, 425, DateTimeKind.Utc).AddTicks(679),
                            KomponentaId = 1,
                            ServisId = 2
                        },
                        new
                        {
                            IzvrseniServisId = 4,
                            Datum = new DateTime(2024, 8, 18, 5, 18, 16, 425, DateTimeKind.Utc).AddTicks(680),
                            KomponentaId = 3,
                            ServisId = 2
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509certificate")
                        .HasColumnType("bit")
                        .HasColumnName("IsX509Certificate");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Use" }, "IX_Keys_Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Komponente", b =>
                {
                    b.Property<int>("KomponentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KomponentaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KomponentaId"));

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tip")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Vrijednost")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("KomponentaId")
                        .HasName("PK_Komponenta");

                    b.ToTable("Komponente", (string)null);

                    b.HasData(
                        new
                        {
                            KomponentaId = 1,
                            Naziv = "Otpornik",
                            Vrijednost = "100Ω"
                        },
                        new
                        {
                            KomponentaId = 2,
                            Naziv = "Relej WT",
                            Tip = "7/VFV 190a"
                        },
                        new
                        {
                            KomponentaId = 3,
                            Naziv = "Relej FV",
                            Tip = "8/WRW 170a"
                        },
                        new
                        {
                            KomponentaId = 4,
                            Naziv = "Kondenzator",
                            Vrijednost = "200pF"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RadnaJedinica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bf2a5ec-6447-44fb-993a-8ec9b854b64e",
                            Email = "asad.admin@tab.ba",
                            EmailConfirmed = true,
                            Ime = "Asad",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASAD.ADMIN@TAB.BA",
                            NormalizedUserName = "ASAD.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOrxB0V96lsHoUhOZJRVnByCxcZnI3HJ5qRY1M0D0A/9T/bfpoT8/Sh3ioZZUlfWsA==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Admin",
                            SecurityStamp = "PDKUYGIUAOVZBNHYEGVK6WMHA2IGLZHZ",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "asad.admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bf2a5ec-6447-44fb-993a-8ec9b854b64e",
                            Email = "asad.serviser@tab.ba",
                            EmailConfirmed = true,
                            Ime = "Asad",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASAD.SERVISER@TAB.BA",
                            NormalizedUserName = "ASAD.SERVISER",
                            PasswordHash = "AQAAAAEAACcQAAAAEOrxB0V96lsHoUhOZJRVnByCxcZnI3HJ5qRY1M0D0A/9T/bfpoT8/Sh3ioZZUlfWsA==",
                            PhoneNumberConfirmed = false,
                            Prezime = "Serviser",
                            SecurityStamp = "PDKUYGIUAOVZBNHYEGVK6WMHA2IGLZHZ",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "asad.serviser"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Lokacija", b =>
                {
                    b.Property<int>("LokacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LokacijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LokacijaId"));

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LokacijaId");

                    b.ToTable("Lokacija", (string)null);

                    b.HasData(
                        new
                        {
                            LokacijaId = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            LokacijaId = 2,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            LokacijaId = 3,
                            Naziv = "Mostar"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Magacin", b =>
                {
                    b.Property<int>("MagacinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MagacinID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MagacinId"));

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int?>("KomponentaId")
                        .HasColumnType("int")
                        .HasColumnName("KomponentaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MagacinId");

                    b.HasIndex("KomponentaId");

                    b.ToTable("Magacin", (string)null);
                });

            modelBuilder.Entity("eWorkshop.Services.Database.PersistedGrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ConsumedTime" }, "IX_PersistedGrants_ConsumedTime");

                    b.HasIndex(new[] { "Expiration" }, "IX_PersistedGrants_Expiration");

                    b.HasIndex(new[] { "Key" }, "IX_PersistedGrants_Key")
                        .IsUnique()
                        .HasFilter("([Key] IS NOT NULL)");

                    b.HasIndex(new[] { "SubjectId", "ClientId", "Type" }, "IX_PersistedGrants_SubjectId_ClientId_Type");

                    b.HasIndex(new[] { "SubjectId", "SessionId", "Type" }, "IX_PersistedGrants_SubjectId_SessionId_Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.RadniZadatak", b =>
                {
                    b.Property<int>("RadniZadatakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RadniZadatakID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RadniZadatakId"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StateMachine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RadniZadatakId");

                    b.ToTable("RadniZadatak", (string)null);

                    b.HasData(
                        new
                        {
                            RadniZadatakId = 1,
                            Datum = new DateTime(2024, 8, 18, 7, 18, 16, 425, DateTimeKind.Local).AddTicks(9913),
                            Naziv = "Mostar",
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.RadniZadatakUredjaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RadniZadatakId")
                        .HasColumnType("int");

                    b.Property<int>("UredjajId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("RadniZadatakId");

                    b.HasIndex("UredjajId");

                    b.ToTable("RadniZadatakUredjaj", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KorisnikId = 1,
                            RadniZadatakId = 1,
                            UredjajId = 189
                        },
                        new
                        {
                            Id = 2,
                            KorisnikId = 1,
                            RadniZadatakId = 1,
                            UredjajId = 190
                        },
                        new
                        {
                            Id = 3,
                            KorisnikId = 2,
                            RadniZadatakId = 1,
                            UredjajId = 192
                        },
                        new
                        {
                            Id = 4,
                            KorisnikId = 2,
                            RadniZadatakId = 1,
                            UredjajId = 193
                        },
                        new
                        {
                            Id = 5,
                            KorisnikId = 1,
                            RadniZadatakId = 1,
                            UredjajId = 194
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ServerSideSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Renewed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayName" }, "IX_ServerSideSessions_DisplayName");

                    b.HasIndex(new[] { "Expires" }, "IX_ServerSideSessions_Expires");

                    b.HasIndex(new[] { "Key" }, "IX_ServerSideSessions_Key")
                        .IsUnique();

                    b.HasIndex(new[] { "SessionId" }, "IX_ServerSideSessions_SessionId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_ServerSideSessions_SubjectId");

                    b.ToTable("ServerSideSessions");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Servi", b =>
                {
                    b.Property<int>("ServisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServisID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServisId"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Napomena")
                        .HasColumnType("text");

                    b.Property<int>("RadniZadatakId")
                        .HasColumnType("int")
                        .HasColumnName("RadniZadatakID");

                    b.Property<int>("UredjajId")
                        .HasColumnType("int")
                        .HasColumnName("UredjajID");

                    b.HasKey("ServisId")
                        .HasName("PK_ServisID");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("RadniZadatakId");

                    b.HasIndex("UredjajId");

                    b.ToTable("Servis");

                    b.HasData(
                        new
                        {
                            ServisId = 1,
                            Datum = new DateTime(2024, 8, 18, 7, 18, 16, 427, DateTimeKind.Local).AddTicks(3615),
                            KorisnikId = 1,
                            RadniZadatakId = 1,
                            UredjajId = 189
                        },
                        new
                        {
                            ServisId = 2,
                            Datum = new DateTime(2024, 8, 18, 7, 18, 16, 427, DateTimeKind.Local).AddTicks(3639),
                            KorisnikId = 1,
                            RadniZadatakId = 1,
                            UredjajId = 190
                        },
                        new
                        {
                            ServisId = 3,
                            Datum = new DateTime(2024, 8, 18, 7, 18, 16, 427, DateTimeKind.Local).AddTicks(3643),
                            KorisnikId = 2,
                            RadniZadatakId = 1,
                            UredjajId = 191
                        },
                        new
                        {
                            ServisId = 4,
                            Datum = new DateTime(2024, 8, 18, 7, 18, 16, 427, DateTimeKind.Local).AddTicks(3646),
                            KorisnikId = 2,
                            RadniZadatakId = 1,
                            UredjajId = 192
                        },
                        new
                        {
                            ServisId = 5,
                            Datum = new DateTime(2024, 8, 18, 7, 18, 16, 427, DateTimeKind.Local).AddTicks(3655),
                            KorisnikId = 1,
                            RadniZadatakId = 1,
                            UredjajId = 193
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Stanice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stanice", (string)null);
                });

            modelBuilder.Entity("eWorkshop.Services.Database.StaniceUredjaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StanicaId")
                        .HasColumnType("int")
                        .HasColumnName("StanicaID");

                    b.Property<int>("UredjajId")
                        .HasColumnType("int")
                        .HasColumnName("UredjajID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StanicaId" }, "IX_StaniceUredjaj_StanicaID");

                    b.HasIndex(new[] { "UredjajId" }, "IX_StaniceUredjaj_UredjajID");

                    b.ToTable("StaniceUredjaj", (string)null);
                });

            modelBuilder.Entity("eWorkshop.Services.Database.TipUredjaja", b =>
                {
                    b.Property<int>("TipUredjajaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipUredjajaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipUredjajaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TipUredjajaId");

                    b.ToTable("TipUredjaja", (string)null);

                    b.HasData(
                        new
                        {
                            TipUredjajaId = 1,
                            Naziv = "KRS",
                            Opis = "Skretnička relejna grupa"
                        },
                        new
                        {
                            TipUredjajaId = 2,
                            Naziv = "RGS",
                            Opis = "Signalna relejna grupa"
                        },
                        new
                        {
                            TipUredjajaId = 3,
                            Naziv = "RKG",
                            Opis = "Relejna kontrolna grupa"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "201ba48a-2a03-4292-ac94-042cc162971f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "be8500a5-2fd7-4eb0-a31d-1587bfd7358b",
                            Name = "Serviser",
                            NormalizedName = "SERVISER"
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Uredjaj", b =>
                {
                    b.Property<int>("UredjajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UredjajID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UredjajId"));

                    b.Property<string>("GodinaIzvedbe")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Koda")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("LokacijaId")
                        .HasColumnType("int")
                        .HasColumnName("LokacijaID");

                    b.Property<string>("SerijskiBroj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TipId")
                        .HasColumnType("int")
                        .HasColumnName("TipID");

                    b.HasKey("UredjajId");

                    b.HasIndex("LokacijaId");

                    b.HasIndex("TipId");

                    b.ToTable("Uredjaj", (string)null);

                    b.HasData(
                        new
                        {
                            UredjajId = 189,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-503",
                            LokacijaId = 1,
                            SerijskiBroj = "4810 AS",
                            Status = "idle",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 190,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "13E7283-1",
                            LokacijaId = 1,
                            SerijskiBroj = "62 66",
                            Status = "idle",
                            TipId = 1
                        },
                        new
                        {
                            UredjajId = 191,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-503",
                            LokacijaId = 2,
                            SerijskiBroj = "1188 ES",
                            Status = "active",
                            TipId = 1
                        },
                        new
                        {
                            UredjajId = 192,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-503",
                            LokacijaId = 3,
                            SerijskiBroj = "22 33",
                            Status = "fix",
                            TipId = 1
                        },
                        new
                        {
                            UredjajId = 193,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-503",
                            LokacijaId = 1,
                            SerijskiBroj = "88 99",
                            Status = "task",
                            TipId = 1
                        },
                        new
                        {
                            UredjajId = 194,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-204-000",
                            LokacijaId = 2,
                            SerijskiBroj = "7697 OS",
                            Status = "fix",
                            TipId = 1
                        },
                        new
                        {
                            UredjajId = 195,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-417-500",
                            LokacijaId = 3,
                            SerijskiBroj = "7034 OS",
                            Status = "ready",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 196,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-436-701",
                            LokacijaId = 1,
                            SerijskiBroj = "32/87",
                            Status = "out",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 197,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "471-008-503",
                            LokacijaId = 2,
                            SerijskiBroj = "1712 MS",
                            Status = "parts",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 198,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "471-008-504",
                            LokacijaId = 3,
                            SerijskiBroj = "197/19",
                            Status = "idle",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 199,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-503",
                            LokacijaId = 1,
                            SerijskiBroj = "174 AS",
                            Status = "active",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 200,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-800",
                            LokacijaId = 2,
                            SerijskiBroj = "2413 NS",
                            Status = "fix",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 201,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-406-800",
                            LokacijaId = 3,
                            SerijskiBroj = "2423 NS",
                            Status = "task",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 202,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-436-700",
                            LokacijaId = 1,
                            SerijskiBroj = "231181",
                            Status = "fix",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 203,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-436-701",
                            LokacijaId = 2,
                            SerijskiBroj = "2566 FS",
                            Status = "ready",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 204,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "465-436-701",
                            LokacijaId = 3,
                            SerijskiBroj = "2676 FS",
                            Status = "out",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 205,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "13E7234-2",
                            LokacijaId = 1,
                            SerijskiBroj = "3/66",
                            Status = "parts",
                            TipId = 2
                        },
                        new
                        {
                            UredjajId = 206,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "471-008-504",
                            LokacijaId = 2,
                            SerijskiBroj = "23040",
                            Status = "ready",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 207,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "471-008-504",
                            LokacijaId = 3,
                            SerijskiBroj = "0105051",
                            Status = "out",
                            TipId = 3
                        },
                        new
                        {
                            UredjajId = 208,
                            GodinaIzvedbe = "1987",
                            IsDeleted = false,
                            Koda = "471-008-504",
                            LokacijaId = 1,
                            SerijskiBroj = "8723069",
                            Status = "parts",
                            TipId = 3
                        });
                });

            modelBuilder.Entity("eWorkshop.Services.Database.KorisniciUloge", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int?>("KorisniciId")
                        .HasColumnType("int");

                    b.HasIndex("KorisniciId");

                    b.HasDiscriminator().HasValue("KorisniciUloge");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eWorkshop.Services.Database.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceClaim", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceProperty", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceProperties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceScope", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceScopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResourceSecret", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.ApiResource", "ApiResource")
                        .WithMany("ApiResourceSecrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiScopeClaim", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.ApiScope", "Scope")
                        .WithMany("ApiScopeClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiScopeProperty", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.ApiScope", "Scope")
                        .WithMany("ApiScopeProperties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetRoleClaim", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUserClaim", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUserLogin", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUserToken", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientClaim", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientClaims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientCorsOrigin", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientGrantType", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientIdPrestriction", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientIdPrestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientPostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientProperty", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientProperties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientRedirectUri", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientScope", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ClientSecret", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityResourceClaim", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityResourceProperty", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceProperties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IzvrseniServi", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Komponente", "Komponenta")
                        .WithMany("IzvrseniServis")
                        .HasForeignKey("KomponentaId")
                        .HasConstraintName("FK_KomponentaServis");

                    b.HasOne("eWorkshop.Services.Database.Servi", "Servis")
                        .WithMany("IzvrseniServis")
                        .HasForeignKey("ServisId")
                        .HasConstraintName("FK_Servis");

                    b.Navigation("Komponenta");

                    b.Navigation("Servis");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Magacin", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Komponente", "Komponenta")
                        .WithMany("Magacins")
                        .HasForeignKey("KomponentaId")
                        .HasConstraintName("FK_Komponenta");

                    b.Navigation("Komponenta");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.RadniZadatakUredjaj", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("RadniZadatakUredjajs")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Korisnik");

                    b.HasOne("eWorkshop.Services.Database.RadniZadatak", "RadniZadatak")
                        .WithMany("RadniZadatakUredjajs")
                        .HasForeignKey("RadniZadatakId")
                        .IsRequired()
                        .HasConstraintName("FK_RadniZadatak");

                    b.HasOne("eWorkshop.Services.Database.Uredjaj", "Uredjaj")
                        .WithMany("RadniZadatakUredjajs")
                        .HasForeignKey("UredjajId")
                        .IsRequired()
                        .HasConstraintName("FK_Uredjaj");

                    b.Navigation("Korisnik");

                    b.Navigation("RadniZadatak");

                    b.Navigation("Uredjaj");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Servi", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Servis")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisnikID");

                    b.HasOne("eWorkshop.Services.Database.RadniZadatak", "RadniZadatak")
                        .WithMany("Servis")
                        .HasForeignKey("RadniZadatakId")
                        .IsRequired()
                        .HasConstraintName("FK_RadniZadatakID");

                    b.HasOne("eWorkshop.Services.Database.Uredjaj", "Uredjaj")
                        .WithMany("Servis")
                        .HasForeignKey("UredjajId")
                        .IsRequired()
                        .HasConstraintName("FK_UredjajID");

                    b.Navigation("Korisnik");

                    b.Navigation("RadniZadatak");

                    b.Navigation("Uredjaj");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.StaniceUredjaj", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Stanice", "Stanica")
                        .WithMany("StaniceUredjajs")
                        .HasForeignKey("StanicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eWorkshop.Services.Database.Uredjaj", "Uredjaj")
                        .WithMany("StaniceUredjajs")
                        .HasForeignKey("UredjajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stanica");

                    b.Navigation("Uredjaj");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Uredjaj", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Lokacija", "Lokacija")
                        .WithMany("Uredjajs")
                        .HasForeignKey("LokacijaId")
                        .HasConstraintName("FK__Uredjaj__Lokacij__45F365D3");

                    b.HasOne("eWorkshop.Services.Database.TipUredjaja", "Tip")
                        .WithMany("Uredjajs")
                        .HasForeignKey("TipId")
                        .IsRequired()
                        .HasConstraintName("FK_UredjajTip");

                    b.Navigation("Lokacija");

                    b.Navigation("Tip");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("eWorkshop.Services.Database.Korisnici", null)
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("KorisniciId");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiResource", b =>
                {
                    b.Navigation("ApiResourceClaims");

                    b.Navigation("ApiResourceProperties");

                    b.Navigation("ApiResourceScopes");

                    b.Navigation("ApiResourceSecrets");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.ApiScope", b =>
                {
                    b.Navigation("ApiScopeClaims");

                    b.Navigation("ApiScopeProperties");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Client", b =>
                {
                    b.Navigation("ClientClaims");

                    b.Navigation("ClientCorsOrigins");

                    b.Navigation("ClientGrantTypes");

                    b.Navigation("ClientIdPrestrictions");

                    b.Navigation("ClientPostLogoutRedirectUris");

                    b.Navigation("ClientProperties");

                    b.Navigation("ClientRedirectUris");

                    b.Navigation("ClientScopes");

                    b.Navigation("ClientSecrets");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.IdentityResource", b =>
                {
                    b.Navigation("IdentityResourceClaims");

                    b.Navigation("IdentityResourceProperties");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Komponente", b =>
                {
                    b.Navigation("IzvrseniServis");

                    b.Navigation("Magacins");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Korisnici", b =>
                {
                    b.Navigation("KorisniciUloge");

                    b.Navigation("RadniZadatakUredjajs");

                    b.Navigation("Servis");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Lokacija", b =>
                {
                    b.Navigation("Uredjajs");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.RadniZadatak", b =>
                {
                    b.Navigation("RadniZadatakUredjajs");

                    b.Navigation("Servis");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Servi", b =>
                {
                    b.Navigation("IzvrseniServis");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Stanice", b =>
                {
                    b.Navigation("StaniceUredjajs");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.TipUredjaja", b =>
                {
                    b.Navigation("Uredjajs");
                });

            modelBuilder.Entity("eWorkshop.Services.Database.Uredjaj", b =>
                {
                    b.Navigation("RadniZadatakUredjajs");

                    b.Navigation("Servis");

                    b.Navigation("StaniceUredjajs");
                });
#pragma warning restore 612, 618
        }
    }
}
